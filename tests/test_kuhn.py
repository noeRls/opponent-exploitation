from src.environement.Kuhn.KuhnEnv import KuhnEnv
from src.environement.Kuhn.KuhnInfo import KuhnAction, Cards
import numpy as np

import unittest

class TestKuhn(unittest.TestCase):

    def test_Q(self):
        env = KuhnEnv()
        env.agent1.card = Cards.Q
        env.agent2.card = Cards.Q
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        np.testing.assert_array_almost_equal(env.agent1.private_equilibrium, [[1, 0, 0], [0, 2.0/3.0, 1.0/3.0]])
        np.testing.assert_array_almost_equal(env.agent2.private_equilibrium, [[1, 0, 0], [0, 0, 0]])
        env.next_game(p1_start=True)

        env.agent2.card = Cards.Q
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        np.testing.assert_array_almost_equal(env.agent2.private_equilibrium, [[0, 1.0/3.0, 2.0/3.0], [0, 0, 0]])

    def test_K(self):
        env = KuhnEnv()
        env.agent1.card = Cards.K
        env.agent2.card = Cards.K
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        np.testing.assert_array_almost_equal(env.agent1.private_equilibrium, [[0, 1, 0], [0, 1, 0]])
        np.testing.assert_array_almost_equal(env.agent2.private_equilibrium, [[0, 1, 0], [0, 0, 0]])
        env.next_game(p1_start=True)

        env.agent2.card = Cards.K
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        np.testing.assert_array_almost_equal(env.agent2.private_equilibrium, [[0, 1, 0], [0, 0, 0]])

    def test_J(self):
        env = KuhnEnv()
        env.agent1.card = Cards.J
        env.agent2.card = Cards.J
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        np.testing.assert_array_almost_equal(env.agent1.private_equilibrium, [[2.0/3.0, 1.0/3.0, 0], [0, 0, 1]])
        np.testing.assert_array_almost_equal(env.agent2.private_equilibrium, [[2.0/3.0, 1.0/3.0, 0], [0, 0, 0]])
        env.next_game(p1_start=True)

        env.agent2.card = Cards.J
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        np.testing.assert_array_almost_equal(env.agent2.private_equilibrium, [[0, 0, 1], [0, 0, 0]])

    def test_public_equilibrium(self):
        env = KuhnEnv()
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        bet1st_round = (1.0/3.0 + 1) / 3.0
        bet3rd_round = (2.0/3.0 + 1) / 3.0
        np.testing.assert_array_almost_equal(env.agent1.public_equilibrium, [[1 - bet1st_round, bet1st_round, 0], [0, bet3rd_round, 1 - bet3rd_round]])
        bet2nd_round_after_check = (1.0/3.0 + 1) / 3.0
        np.testing.assert_equal(env.agent2.public_equilibrium, [[1 - bet2nd_round_after_check, bet2nd_round_after_check, 0], [0, 0, 0]])
        env.next_game(p1_start=True)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.CALL)
        bet2nd_round_after_bet = bet2nd_round_after_check
        np.testing.assert_equal(env.agent2.public_equilibrium, [[0, bet2nd_round_after_bet, 1 - bet2nd_round_after_bet], [0, 0, 0]])

    def test_game_end(self):
        pass
        # env = KuhnEnv()
        # env.play(KuhnAction.BET)
        # env.play(KuhnAction.BET)

    def test_game_reward(self):
        pass

if __name__ == '__main__':
    unittest.main()