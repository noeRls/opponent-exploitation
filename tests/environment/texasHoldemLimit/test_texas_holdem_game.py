import unittest
from src.environement.TexasHoldemLimit.TexaxHoldemEnv import TexasHoldemEnv
from src.environement.TexasHoldemLimit.TexasHoldemDealer import CardSymbol, CardValue, FullDeckCard
from src.environement.TexasHoldemLimit.TexasHoldemInfo import TexasHoldemAction
from ..MockDealer import MockDealer
import numpy as np

deck = [
    FullDeckCard(CardValue.J, CardSymbol.CLUBS),
    FullDeckCard(CardValue.J, CardSymbol.HEART),
    FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.THREE, CardSymbol.SPADE),
    FullDeckCard(CardValue.TWO, CardSymbol.CLUBS),
    FullDeckCard(CardValue.TWO, CardSymbol.SPADE),
    FullDeckCard(CardValue.THREE, CardSymbol.HEART),
    FullDeckCard(CardValue.K, CardSymbol.HEART),
    FullDeckCard(CardValue.A, CardSymbol.HEART),
]


class TestTexasLimitGame(unittest.TestCase):
    def test_chips(self):
        env = TexasHoldemEnv()
        dealer = MockDealer(deck)
        env.next_game(False, dealer)
        self.assertEqual(env.agent1.chips_bet, 2)
        self.assertEqual(env.agent2.chips_bet, 1)
        env.play(TexasHoldemAction.CALL)
        self.assertEqual(env.agent2.chips_bet, 2)
        env.play(TexasHoldemAction.CHECK)
        # r1
        env.play(TexasHoldemAction.BET)
        self.assertEqual(env.agent2.chips_bet, 4)
        env.play(TexasHoldemAction.RAISE)
        self.assertEqual(env.agent1.chips_bet, 6)
        env.play(TexasHoldemAction.CALL)
        self.assertEqual(env.agent2.chips_bet, 6)

    def test_cards(self):
        env = TexasHoldemEnv()
        dealer = MockDealer(deck)
        env.next_game(False, dealer)
        np.testing.assert_equal(env.agent1.cards, [deck[0], deck[1]])
        np.testing.assert_equal(env.agent2.cards, [deck[2], deck[3]])
        expected_deck = []
        np.testing.assert_equal(env.state.public_cards, expected_deck)
        env.play(TexasHoldemAction.CALL)
        env.play(TexasHoldemAction.CHECK)
        expected_deck += [deck[4], deck[5], deck[6]]
        np.testing.assert_equal(env.state.public_cards, expected_deck)
        env.play(TexasHoldemAction.CHECK)
        env.play(TexasHoldemAction.BET)
        env.play(TexasHoldemAction.RAISE)
        np.testing.assert_equal(env.state.public_cards, expected_deck)
        env.play(TexasHoldemAction.CALL)
        expected_deck.append(deck[7])
        np.testing.assert_equal(env.state.public_cards, expected_deck)
        env.play(TexasHoldemAction.CHECK)
        env.play(TexasHoldemAction.CHECK)
        expected_deck.append(deck[8])
        env.play(TexasHoldemAction.CHECK)
        env.play(TexasHoldemAction.CHECK)
        # not adding card because the game is finished
        np.testing.assert_equal(env.state.public_cards, expected_deck)

    def test_end_game_revealed(self):
        env = TexasHoldemEnv()
        dealer = MockDealer(deck)
        env.next_game(False, dealer)
        env.play(TexasHoldemAction.CALL)
        env.play(TexasHoldemAction.CHECK)
        # r1
        env.play(TexasHoldemAction.BET)
        env.play(TexasHoldemAction.CALL)
        # r2
        env.play(TexasHoldemAction.CHECK)
        env.play(TexasHoldemAction.CHECK)
        # r3
        env.play(TexasHoldemAction.CHECK)
        env.play(TexasHoldemAction.CHECK)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.revealed, True)
        self.assertEqual(env.agent2.revealed, True)
        self.assertEqual(env.agent1.reward, 4)
        self.assertEqual(env.agent2.reward, -4)

    def test_end_game_fold(self):
        env = TexasHoldemEnv()
        dealer = MockDealer(deck)
        env.next_game(False, dealer)
        env.play(TexasHoldemAction.FOLD)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.revealed, False)
        self.assertEqual(env.agent2.revealed, False)
        self.assertEqual(env.agent1.reward, 1)
        self.assertEqual(env.agent2.reward, -1)

    def test_available_actions(self):
        env = TexasHoldemEnv()
        dealer = MockDealer(deck)
        env.next_game(False, dealer)
        np.testing.assert_equal(env.get_available_actions(), [
            TexasHoldemAction.CALL,
            TexasHoldemAction.FOLD,
            TexasHoldemAction.RAISE
        ])
        env.play(TexasHoldemAction.CALL)
        np.testing.assert_equal(env.get_available_actions(), [
            TexasHoldemAction.BET,
            TexasHoldemAction.CHECK,
        ])
        env.play(TexasHoldemAction.BET)
        env.play(TexasHoldemAction.RAISE)
        env.play(TexasHoldemAction.RAISE)
        env.play(TexasHoldemAction.RAISE)
        env.play(TexasHoldemAction.RAISE)
        env.play(TexasHoldemAction.RAISE)
        np.testing.assert_equal(env.get_available_actions(), [
            TexasHoldemAction.CALL,
            TexasHoldemAction.FOLD,
        ])
        env.play(TexasHoldemAction.CALL)

if __name__ == '__main__':
    unittest.main()
