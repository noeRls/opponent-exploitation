from src.environement.TexasHoldemLimit.rank_hands import compare_hands_5, get_best_hand_7, HandCompareResult, is_same_hand
from src.environement.TexasHoldemLimit.TexasHoldemDealer import FullDeckCard, CardSymbol, CardValue

import unittest

straight_flush = [
    FullDeckCard(CardValue.EIGHT, CardSymbol.CLUBS),
    FullDeckCard(CardValue.SEVEN, CardSymbol.CLUBS),
    FullDeckCard(CardValue.SIX, CardSymbol.CLUBS),
    FullDeckCard(CardValue.FIVE, CardSymbol.CLUBS),
    FullDeckCard(CardValue.FOUR, CardSymbol.CLUBS)
]

four = [
    FullDeckCard(CardValue.SIX, CardSymbol.CLUBS),
    FullDeckCard(CardValue.SIX, CardSymbol.HEART),
    FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.SIX, CardSymbol.SPADE),
    FullDeckCard(CardValue.FOUR, CardSymbol.CLUBS)
]

full_house = [
    FullDeckCard(CardValue.TEN, CardSymbol.CLUBS),
    FullDeckCard(CardValue.TEN, CardSymbol.HEART),
    FullDeckCard(CardValue.TEN, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.SIX, CardSymbol.SPADE),
    FullDeckCard(CardValue.SIX, CardSymbol.CLUBS)

]

flush = [
    FullDeckCard(CardValue.TEN, CardSymbol.HEART),
    FullDeckCard(CardValue.Q, CardSymbol.HEART),
    FullDeckCard(CardValue.TWO, CardSymbol.HEART),
    FullDeckCard(CardValue.FIVE, CardSymbol.HEART),
    FullDeckCard(CardValue.EIGHT, CardSymbol.HEART)
]

straight = [
    FullDeckCard(CardValue.EIGHT, CardSymbol.CLUBS),
    FullDeckCard(CardValue.SEVEN, CardSymbol.HEART),
    FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.FIVE, CardSymbol.CLUBS),
    FullDeckCard(CardValue.FOUR, CardSymbol.HEART)
]

three = [
    FullDeckCard(CardValue.TEN, CardSymbol.CLUBS),
    FullDeckCard(CardValue.TEN, CardSymbol.HEART),
    FullDeckCard(CardValue.TEN, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.SIX, CardSymbol.SPADE),
    FullDeckCard(CardValue.SEVEN, CardSymbol.CLUBS)
]

two_pair = [
    FullDeckCard(CardValue.A, CardSymbol.CLUBS),
    FullDeckCard(CardValue.A, CardSymbol.HEART),
    FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.SIX, CardSymbol.SPADE),
    FullDeckCard(CardValue.SEVEN, CardSymbol.CLUBS)
]

pair = [
    FullDeckCard(CardValue.J, CardSymbol.CLUBS),
    FullDeckCard(CardValue.J, CardSymbol.HEART),
    FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.THREE, CardSymbol.SPADE),
    FullDeckCard(CardValue.TWO, CardSymbol.CLUBS)
]

high_card = [
    FullDeckCard(CardValue.K, CardSymbol.CLUBS),
    FullDeckCard(CardValue.J, CardSymbol.HEART),
    FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
    FullDeckCard(CardValue.THREE, CardSymbol.SPADE),
    FullDeckCard(CardValue.TWO, CardSymbol.CLUBS)
]

winning_order = [straight_flush, four, full_house, flush, straight, three, two_pair, pair, high_card]

class TestHandRankingTexasHoldemLimit(unittest.TestCase):
    def test_hand_ranking_win_loss(self):
        for i in range(len(winning_order) - 1):
            for i2 in range(i + 1, len(winning_order)):
                self.assertEqual(compare_hands_5(winning_order[i], winning_order[i2]), HandCompareResult.WIN)
                self.assertEqual(compare_hands_5(winning_order[i2], winning_order[i]), HandCompareResult.LOSS)
        for i in range(len(winning_order)):
            self.assertEqual(compare_hands_5(winning_order[i], winning_order[i]), HandCompareResult.EQUAL)

    def test_card_diff_ranking(self):
        self.assertEqual(compare_hands_5([
                FullDeckCard(CardValue.A, CardSymbol.CLUBS),
                FullDeckCard(CardValue.A, CardSymbol.HEART),
                FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
                FullDeckCard(CardValue.SIX, CardSymbol.SPADE),
                FullDeckCard(CardValue.SEVEN, CardSymbol.CLUBS)

        ], [
                FullDeckCard(CardValue.A, CardSymbol.CLUBS),
                FullDeckCard(CardValue.A, CardSymbol.HEART),
                FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
                FullDeckCard(CardValue.SIX, CardSymbol.SPADE),
                FullDeckCard(CardValue.EIGHT, CardSymbol.CLUBS)
        ]), HandCompareResult.LOSS)

        self.assertEqual(compare_hands_5([
            FullDeckCard(CardValue.J, CardSymbol.CLUBS),
            FullDeckCard(CardValue.J, CardSymbol.HEART),
            FullDeckCard(CardValue.SIX, CardSymbol.DIAMOND),
            FullDeckCard(CardValue.THREE, CardSymbol.SPADE),
            FullDeckCard(CardValue.TWO, CardSymbol.CLUBS)
        ], [
            FullDeckCard(CardValue.A, CardSymbol.CLUBS),
            FullDeckCard(CardValue.K, CardSymbol.HEART),
            FullDeckCard(CardValue.Q, CardSymbol.DIAMOND),
            FullDeckCard(CardValue.THREE, CardSymbol.SPADE),
            FullDeckCard(CardValue.TWO, CardSymbol.CLUBS)

        ]), HandCompareResult.WIN)

    def test_get_best_hand(self):
        self.assertEqual(is_same_hand(straight, get_best_hand_7(straight + [
            FullDeckCard(CardValue.A, CardSymbol.CLUBS),
            FullDeckCard(CardValue.K, CardSymbol.CLUBS)
        ])), True)
        expected = [
            FullDeckCard(CardValue.TEN, CardSymbol.CLUBS),
            FullDeckCard(CardValue.TEN, CardSymbol.HEART),
            FullDeckCard(CardValue.TEN, CardSymbol.DIAMOND),
            FullDeckCard(CardValue.SEVEN, CardSymbol.SPADE),
            FullDeckCard(CardValue.SEVEN, CardSymbol.CLUBS)
        ]
        self.assertEqual(is_same_hand(expected, get_best_hand_7(expected + [
            FullDeckCard(CardValue.SIX, CardSymbol.CLUBS),
            FullDeckCard(CardValue.SIX, CardSymbol.CLUBS)
        ])), True)

if __name__ == '__main__':
    unittest.main()
