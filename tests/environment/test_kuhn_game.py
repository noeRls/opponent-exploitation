import collections
from src.environement.Kuhn.KuhnEnv import KuhnEnv
from src.environement.Kuhn.KuhnInfo import KuhnAction, Cards
import numpy as np

import unittest

class TestKuhnGame(unittest.TestCase):
    def test_game_double_bet(self):
        env = KuhnEnv()
        env.agent1.card = Cards.Q
        env.agent2.card = Cards.K
        env.play(KuhnAction.BET)
        env.play(KuhnAction.BET)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, -2)
        self.assertEqual(env.agent2.reward, 2)

    def test_game_double_check(self):
        env = KuhnEnv()
        env.agent1.card = Cards.Q
        env.agent2.card = Cards.J
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.CHECK)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, 1)
        self.assertEqual(env.agent2.reward, -1)

    def test_game_check_bet_bet(self):
        env = KuhnEnv()
        env.agent1.card = Cards.J
        env.agent2.card = Cards.K
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.BET)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, -2)
        self.assertEqual(env.agent2.reward, 2)

    def test_game_fold(self):
        env = KuhnEnv()
        env.agent1.card = Cards.J
        env.agent2.card = Cards.K
        env.play(KuhnAction.BET)
        env.play(KuhnAction.FOLD)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, 1)
        self.assertEqual(env.agent2.reward, -1)

    def assert_same_list(self, l1: list, l2: list):
        self.assertEqual(collections.Counter(l1) == collections.Counter(l2), True)

    def test_available_action(self):
        env = KuhnEnv()
        self.assert_same_list(env.get_available_actions(), [KuhnAction.BET, KuhnAction.CHECK])
        env.play(KuhnAction.BET)
        self.assert_same_list(env.get_available_actions(), [KuhnAction.FOLD, KuhnAction.CALL])
        env.next_game()
        env.play(KuhnAction.CHECK)
        self.assert_same_list(env.get_available_actions(), [KuhnAction.CHECK, KuhnAction.BET])
        env.play(KuhnAction.BET)
        self.assert_same_list(env.get_available_actions(), [KuhnAction.FOLD, KuhnAction.CALL])

    def test_generate_game_state(self):
        env = KuhnEnv()
        saved_state = env.generate_random_starting_state()
        c1 = saved_state["agent1"]
        c2 = saved_state["agent2"]
        env.play(KuhnAction.BET)
        env.play(KuhnAction.BET)
        env.next_game(False)
        env.set_starting_state(saved_state, False)
        self.assertEqual(c1, env.agent1.card)
        self.assertEqual(c2, env.agent2.card)
        env.set_starting_state(saved_state, True)
        self.assertEqual(c1, env.agent2.card)
        self.assertEqual(c2, env.agent1.card)

if __name__ == '__main__':
    unittest.main()