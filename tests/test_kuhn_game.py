from src.environement.Kuhn.KuhnEnv import KuhnEnv
from src.environement.Kuhn.KuhnInfo import KuhnAction, Cards
import numpy as np

import unittest

class TestKuhnGame(unittest.TestCase):
    def test_game_double_bet(self):
        env = KuhnEnv()
        env.agent1.card = Cards.Q
        env.agent2.card = Cards.K
        env.play(KuhnAction.BET)
        env.play(KuhnAction.BET)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, -2)
        self.assertEqual(env.agent2.reward, 2)

    def test_game_double_check(self):
        env = KuhnEnv()
        env.agent1.card = Cards.Q
        env.agent2.card = Cards.J
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.CHECK)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, 1)
        self.assertEqual(env.agent2.reward, -1)

    def test_game_check_bet_bet(self):
        env = KuhnEnv()
        env.agent1.card = Cards.J
        env.agent2.card = Cards.K
        env.play(KuhnAction.CHECK)
        env.play(KuhnAction.BET)
        env.play(KuhnAction.BET)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, -2)
        self.assertEqual(env.agent2.reward, 2)

    def test_game_fold(self):
        env = KuhnEnv()
        env.agent1.card = Cards.J
        env.agent2.card = Cards.K
        env.play(KuhnAction.BET)
        env.play(KuhnAction.FOLD)
        self.assertEqual(env.game_ended, True)
        self.assertEqual(env.agent1.reward, 1)
        self.assertEqual(env.agent2.reward, -1)

    # todo test available action

if __name__ == '__main__':
    unittest.main()