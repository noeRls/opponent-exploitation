from tests.environment.MockStrategy import MockStrategy
from src.environement.Strategy import Strategy
from src.train.ea.Individual import Individual
from src.environement.Kuhn import strategy
from src.train.ea.play_against import play_against
from src.environement.Kuhn.KuhnEnv import KuhnEnv
from src.environement.Kuhn.KuhnInfo import KuhnAction, Cards
from src.environement.Kuhn.strategy.all_strategy import ALL_KUHN_STRATEGY, AlwaysBetStrategy, AlwaysFoldStrategy
import numpy as np

import unittest


class TestIndividual(unittest.TestCase):
    def test_win_lost_registration(self):
        i1 = Individual(MockStrategy())
        i2 = Individual(MockStrategy())
        i1.register_win(i2)
        self.assertEqual(i1.won_against[0], i2)
        self.assertEqual(i2.lost_against[0], i1)
        i1.reset()
        self.assertEqual(len(i1.won_against), 0)

    def test_fitness(self):
        i1 = Individual(MockStrategy())
        i2 = Individual(MockStrategy())
        i3 = Individual(MockStrategy())
        i1.register_win(i2)
        i1.register_win(i3)
        i2.register_win(i3)
        self.assertEqual(i1.compute_fitness(), 1.5)
        self.assertEqual(i2.compute_fitness(), 0.5)
        self.assertEqual(i3.compute_fitness(), 0)

    def test_id(self):
        i1 = Individual(MockStrategy())
        i2 = Individual(MockStrategy())
        self.assertNotEqual(i1.id, i2.id)


if __name__ == '__main__':
    unittest.main()
