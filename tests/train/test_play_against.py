import collections
from src.environement.Kuhn import strategy
from src.train.ea.play_against import play_against
from src.environement.Kuhn.KuhnEnv import KuhnEnv
from src.environement.Kuhn.KuhnInfo import KuhnAction, Cards
from src.environement.Kuhn.strategy.all_strategy import ALL_KUHN_STRATEGY, AlwaysBetStrategy, AlwaysFoldStrategy
import numpy as np

import unittest


class TestPlayAgainst(unittest.TestCase):
    def test_fold_vs_bet(self):
        env = KuhnEnv()
        bet = AlwaysBetStrategy()
        fold = AlwaysFoldStrategy()
        reward_bet, reward_fold = play_against(env, bet, fold, 100)
        self.assertEqual(reward_bet, 200)
        self.assertEqual(reward_fold, -200)

    def test_all_strategy(self):
        env = KuhnEnv()
        strategy = []
        for S in ALL_KUHN_STRATEGY:
            strategy.append(S())
        for x in range(len(strategy)):
            s1 = strategy[x]
            for y in range(x + 1, len(strategy)):
                s2 = strategy[y]
                play_against(env, s1, s2, nb_games=10)


if __name__ == '__main__':
    unittest.main()
