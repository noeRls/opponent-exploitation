#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include "PokerEnv.hpp"
#include "CFR.hpp"

std::vector<Card> loadStringCards(std::string cards) {
    if (cards.size() % 2 != 0) {
        throw InvalidCardEncoding();
    }
    std::vector<Card> result { };
    for (int i = 0; i < cards.size(); i += 2) {
        result.push_back({ cards[0], static_cast<Suits>(cards[1]) });
    }
};

void runCFREntrypoint(
    std::string publicCardsString,
    std::string privateCardsString,
    int betnb,
    int chipsa1,
    bool a1hasplayed,
    bool a2hasplayed,
    int chipsa2,
    bool ourTurn
) {
    std::vector<Card> publicCards = loadStringCards(publicCardsString);
    std::vector<Card> privateCards = loadStringCards(privateCardsString);
    Agent ourself = Agent(privateCards, chipsa1, a1hasplayed);
    Agent opponent = Agent({}, chipsa2, a2hasplayed, true);
    PokerEnv(ourself, opponent, publicCards, betnb, ourTurn);
}

static PyObject *SpamError;

static PyObject *
pokercfr_cfr(PyObject *self, PyObject *args)
{
    const char *publicCardString;
    const char *privateCardString;
    int betnb;
    int chipsa1;
    bool a1hasplayed;
    bool a2hasplayed;
    int chipsa2;
    bool ourTurn;

    int result = 0;

    if (!PyArg_ParseTuple(args, "ssiippip",
        &publicCardString,
        &privateCardString,
        &betnb,
        &chipsa1,
        &a1hasplayed,
        &a2hasplayed,
        &chipsa2,
        &ourTurn
    ))
        return NULL;
    printf("Calling with %s %s %d %d %d %d %d %d\n", publicCardString, privateCardString, betnb, chipsa1, a1hasplayed, a2hasplayed, chipsa2, ourTurn);
    runCFREntrypoint(
        publicCardString,
        privateCardString,
        betnb,
        chipsa1,
        a1hasplayed,
        a2hasplayed,
        chipsa2,
        ourTurn
    );
    return PyLong_FromLong(result);
}

static PyMethodDef PokerCfrMethods[] = {
    {"cfr",  pokercfr_cfr, METH_VARARGS,
     "Run cfr for poker."},
    {NULL, NULL, 0, NULL}        /* Sentinel */
};

static struct PyModuleDef pokercfrmodule = {
    PyModuleDef_HEAD_INIT,
    "pokercfr",   /* name of module */
    NULL, /* module documentation, may be NULL */
    -1,       /* size of per-interpreter state of the module,
                 or -1 if the module keeps state in global variables. */
    PokerCfrMethods
};

PyMODINIT_FUNC
PyInit_pokercfr(void)
{
    return PyModule_Create(&pokercfrmodule);
}