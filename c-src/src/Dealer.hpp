#pragma once

#include <string>
#include <vector>
#include <random>

const std::vector<char> ALL_CARDS_NUMBER = { '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A' };
const std::string ALL_CARDS_NUMBER_STR = std::accumulate(ALL_CARDS_NUMBER.begin(), ALL_CARDS_NUMBER.end(), "", [](const char a) { return std::to_string(a); });

enum Suits {
    SPADE = 'S',
    DIAMAND = 'D',
    HEARTH = 'H',
    CLUBS = 'C'
};
const std::vector<Suits> SUITS = { SPADE, DIAMAND, HEARTH, CLUBS };

class Card {
    public:
        Card(char number, Suits suit) : number(number), suit(suit) {};
        ~Card();

        std::string getHash() {
            return std::to_string(number) + std::to_string(suit);
        }

        static std::string getCardsHash(const std::vector<Card> cards) {
            std::string result {};
            for (auto card : cards) {
                result += card.getHash();
            }
            return result;
        }

        char getRank() const {
            return std::distance(ALL_CARDS_NUMBER.begin(), std::find(ALL_CARDS_NUMBER.begin(), ALL_CARDS_NUMBER.end(), number));
        }

        char number;
        Suits suit;
};

const std::vector<Card> getFullDeck() {
    std::vector<Card> result = {};
    for (char number : ALL_CARDS_NUMBER) {
        for (Suits suit : SUITS) {
            result.push_back({ number, suit });
        }
    }
    return result;
}

class Dealer {
    public:
        Dealer() : deck(getFullDeck()) {};
        // Dealer(const Dealer &dealer) : deck(dealer.deck) {};
        ~Dealer();

        Card drawCard() {
            int idx = rand() % deck.size();
            const auto card = deck[idx];
            deck.erase(deck.begin() + idx);
            return card;
        }

        void removeCards(const std::vector<Card> toRemove) {
            deck.erase(std::remove_if(deck.begin(), deck.end(), [toRemove](const Card &card) {
                return std::find(toRemove.begin(), toRemove.end(), card) != toRemove.end();
            }), deck.end());
        }

    protected:
        std::vector<Card> deck;
};
