from src.environement.Kuhn.strategy.equilibrium import EquilibriumStrategy
from src.nn.NN import NN
from src.constants import SAVE_MODEL_PATH
from src.train.ea.NNIndividual import NNIndividual
from src.nn.NNStrategy import NNStrategy
from src.train.ea.Population import Population, TrainingIndividual
from src.environement.Environment import Environment
from src.train.ea.Individual import Individual
from src.environement.Strategy import Strategy
from .play_against import play_against
from src.environement.Kuhn.strategy.all_strategy import ALL_KUHN_STRATEGY
from src.environement.Kuhn.KuhnEnv import KuhnEnv
from typing import List
from .Individual import Individual
from os import path

MODEL_SIZE = 5

def train():
    env = KuhnEnv()
    teaching_individuals: List[Individual] = []
    for S in ALL_KUHN_STRATEGY:
        teaching_individuals.append(Individual(S(env)))
    TRAINING_NB = 10
    NEW_INDIVIDUAL_PER_ITERATION = 7
    MUTATION_RATE = 0.3
    ITERATION = 20
    training_individuals: List[TrainingIndividual] = [NNIndividual(NNStrategy(env, MODEL_SIZE)) for _ in range(TRAINING_NB)]
    population = Population(
        training_individuals=training_individuals,
        new_individual_per_iteration=NEW_INDIVIDUAL_PER_ITERATION,
        mutation_rate=MUTATION_RATE,
        teaching_set=teaching_individuals
    )
    for iteration_nb in range(ITERATION):
        print(f'ITERATION {iteration_nb + 1}')
        population.process_iteration(env)
    individual = population.get_best_individual()
    s: NNStrategy = individual.startegy
    s.save(SAVE_MODEL_PATH)

def analyze(save_id: int):
    env = KuhnEnv()
    nn_strategy = NNStrategy(env, MODEL_SIZE)
    nn_strategy.load(SAVE_MODEL_PATH, save_id)
    NN.store_history = True
    play_against(env, nn_strategy, EquilibriumStrategy(env))
    nn_strategy.descision_making_nn.summary()

def main():
    # train()
    analyze(150)