from io import TextIOWrapper
from posixpath import join
from src.environement.Kuhn.strategy.close_equilibrium import CloseEquilibriumStrategy
from src.nn.opponent_modelling import OpponentModellingNN
from src.report.Report import Report
from src.utils.plot import save_plot
from src.environement.Kuhn.strategy.random import RandomStrategy
from src.environement.Kuhn.strategy.always_bet import AlwaysBetStrategy
from src.environement.Kuhn.strategy.always_fold import AlwaysFoldStrategy
from src.environement.Environment import Environment
from src.environement.Kuhn.strategy.best_response import KuhnBestResponseStrategy
from src.environement.Kuhn.strategy.human_strategy import HumanStrategy
from src.environement.Kuhn.strategy.equilibrium import EquilibriumStrategy
from src.nn.NN import NN
from src.constants import SAVE_MODEL_PATH
from src.train.ea.NNIndividual import NNIndividual
from src.nn.NNStrategy import NNStrategy
from src.train.ea.Population import Population, TrainingIndividual
from src.train.ea.Individual import Individual
from src.environement.Strategy import Strategy
from .play_against import play_against
from src.environement.Kuhn.strategy.all_strategy import ALL_KUHN_STRATEGY
from src.environement.Kuhn.KuhnEnv import KuhnEnv
from typing import List, TextIO
from .Individual import Individual
import matplotlib.pyplot as plt

MODEL_SIZE = 10

def train():
    SUBOPTIMAL_OPPONENT_TEACHING_SET = 3
    TRAINING_NB = 20
    NEW_INDIVIDUAL_PER_ITERATION = 15
    MUTATION_RATE = 0.1
    ITERATION = 100
    NB_GAMES=25

    env = KuhnEnv()

    teaching_individuals: List[Individual] = []
    for S in ALL_KUHN_STRATEGY:
        teaching_individuals.append(Individual(S()))
    for _ in range(SUBOPTIMAL_OPPONENT_TEACHING_SET):
        teaching_individuals.append(Individual(CloseEquilibriumStrategy()))

    training_individuals: List[TrainingIndividual] = [NNIndividual(
        NNStrategy(env, MODEL_SIZE)) for _ in range(TRAINING_NB)]
    population = Population(
        training_individuals=training_individuals,
        new_individual_per_iteration=NEW_INDIVIDUAL_PER_ITERATION,
        mutation_rate=MUTATION_RATE,
        teaching_set=teaching_individuals,
        nb_games=NB_GAMES
    )
    for iteration_nb in range(ITERATION):
        print(f'ITERATION {iteration_nb + 1}')
        population.process_iteration(env)
    individual = population.get_best_individual()
    s: NNStrategy = individual.startegy
    s.save(SAVE_MODEL_PATH)

def analyze():
    report = Report(
        id=2786914718144,
        save_path="./out-plots/kuhn-poker/correct-equilibrium",
        env=KuhnEnv(),
    )
    report.load_nn_strategy(MODEL_SIZE)
    report.nn_summary(25, descision_making=False)
    # report.best_response_report()
    # report.plot_reward_over_time(True)

def play_with_human(save_id: int, nb_games=5):
    env = KuhnEnv()
    nn_strategy = NNStrategy(env, MODEL_SIZE)
    nn_strategy.load(SAVE_MODEL_PATH, save_id)
    human_strategy = HumanStrategy()
    play_against(env, nn_strategy, human_strategy, nb_games, debug=True)

def main():
    train()
    # next implem A 2786914718144 model_size=10, nn_om=20
    # next implem B 2075968396832 model_size model_size=5, nn_om=10
    # analyze()