% data structure
Struct Individual {
    won_against = []
    lost_against = []
    fitness = 0
}

% The TeachingIndividual is only here for indication, you can have a different set of metadata
Struct TeachingIndividual extends Individual {
    strategy_name: string
}

Struct LearningIndividual extends Individual {
    values: array representing the training parameters
}

% hyperparameters
iterations = 100
mutation_rate = 0.1
trainable_params = 10
nb_population = 10
new_member_per_population = 7
individual_kept_nb = nb_population - new_member_per_population

% initialization
training_individuals = []
FOR _ in nb_population:
    training_individuals.append(LearningIndividual(
        values: random number array from -1 to 1 of size trainable_params,
    ))
teaching_individuals = [
    TeachingIndividual(strategy_name: "equilibrium")
    TeachingIndividual(strategy_name: "random")
    TeachingIndividual(strategy_name: "bet")
    TeachingIndividual(strategy_name: "fold")
    TeachingIndividual(strategy_name: "close_equilibrium")
]

% run
FOR _ in iterations:
    population = training_individuals + teaching_individuals

    % make them play against eachother
    FOR i = 0; i to population.size():
        FOR j = i + 1; j to population.size():
            a, b = population[i], population[j]
            result = evaluate(a, b)
            if result == WIN:
                a.won_against.append(b)
                b.lost_against.append(a)
            else if result == LOST:
                b.won_against.append(a)
                a.lost_against.append(b)

    % assign fitness
    FOR individual in population.size():
        individual.fitness = 0
        FOR looser_individual in individual.lost_against:
            individual.fitness += 1 / looser_individual.lost_against.size()

    % generate new population
    selected_individuals = randomly select new_member_per_population of training_individuals proportionaly to their fitness
    FOR new_individual in selected_individuals:
        new_individual.values = randomly change the values from -1 to 1 with a probability of mutation_rate

    % process selection and assign a new population
    individual_kept = select individual_kept_nb best training_individuals based on their fitness
    training_individuals = selected_individuals + individual_kept