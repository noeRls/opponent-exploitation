from src.environement.Kuhn.strategy.random_then_best import RandomThenBestStrategy
from src.environement.Kuhn.strategy.close_equilibrium import CloseEquilibriumStrategy
from src.utils.paths import get_save_file
from src.nn.NN import DumbNNParams, NN
from src.environement.Strategy import Strategy
from src.environement.Kuhn.strategy.best_response import KuhnBestResponseStrategy
from src.environement.Kuhn.strategy.random import RandomStrategy
from src.environement.Kuhn.strategy.always_fold import AlwaysFoldStrategy
from src.environement.Kuhn.strategy.always_bet import AlwaysBetStrategy
from src.environement.Kuhn.strategy.equilibrium import EquilibriumStrategy
from src.train.ea.play_against import play_against
from src.utils.plot import save_plot
from src.nn.NNStrategy import NNStrategy
from src.environement.Environment import Environment
from typing import TextIO
import matplotlib.pyplot as plt

class Report():
    save_id: str
    out_file: TextIO
    env: Environment
    strategy: Strategy
    def __init__(self, save_id: str, env: Environment) -> None:
        self.env = env
        self.save_id = save_id
        self._init_files()

    def _init_files(self):
        self.out_file = open(get_save_file(self.save_id, 'report.txt'), "w+", encoding="utf-8")
        print(f'save_id={self.save_id}', file=self.out_file)

    def set_strategy(self, strategy: Strategy):
        self.strategy = strategy

    def load_nn_strategy(self):
        self.strategy = NNStrategy(self.env, DumbNNParams(), DumbNNParams())
        self.strategy.load(self.save_id)
        NN.store_history = True

    def nn_summary(self, nb_games=25, descision_making=True, opponent_modelling=True):
        play_against(self.env, self.strategy, EquilibriumStrategy(), nb_games)
        play_against(self.env, self.strategy, CloseEquilibriumStrategy(), nb_games)
        play_against(self.env, self.strategy, AlwaysBetStrategy(), nb_games)
        play_against(self.env, self.strategy, AlwaysFoldStrategy(), nb_games)
        play_against(self.env, self.strategy, RandomStrategy(), nb_games)
        if descision_making:
            self.strategy.descision_making_nn.summary(self.save_id)
        if opponent_modelling:
            self.strategy.oppnent_modelling_nn.summary(self.save_id)

    def best_response_report(self):
        best_response_strategy = KuhnBestResponseStrategy()
        result = play_against(self.env, self.strategy, best_response_strategy, 50)
        print(f"best_reponse={result.r2} tested_strategy={result.r1}", file=self.out_file)

    def _plot_reward_over_time(self, opponent: Strategy):
        result = play_against(self.env, self.strategy, opponent, nb_games=1000, history=True)
        _, ax = plt.subplots()
        print(f'{self.strategy.get_name()}={result.r1} f{opponent.get_name()}={result.r2}', file=self.out_file)
        ax.plot([i for i in range(len(result.r1_history[0]))], result.r1_history[0])
        ax.set(xlabel="Game", ylabel="Reward", title=f"{self.strategy.get_name()} reward against {opponent.get_name()} over time")
        save_plot(self.save_id, f'reward-against-{opponent.get_name()}')

    def plot_reward_over_time(self):
        self._plot_reward_over_time(RandomThenBestStrategy())
        self._plot_reward_over_time(AlwaysBetStrategy())
        self._plot_reward_over_time(AlwaysFoldStrategy())
        self._plot_reward_over_time(EquilibriumStrategy())
        self._plot_reward_over_time(KuhnBestResponseStrategy())
        self._plot_reward_over_time(RandomStrategy())
        self._plot_reward_over_time(CloseEquilibriumStrategy())