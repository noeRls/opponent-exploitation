from Environment import Environment
from enum import Enum

class KuhnAction(Enum):
    BET = 0
    CHECK = 1
    FOLD = 2
    CALL = 3

class KuhnNode():
    def __init__(self, transitions: list[Transition], state = None):
        self.transitions = transitions
        self.state = state

class Transition():
    equilibrium: int
    node: KuhnNode
    action: int

    def __init__(self, equilibrium, node, action):
        self.equilibrium = equilibrium
        self.action = action
        self.node = node

ALPHA = 1.0 / 3.0
def build_kuhn_tree_first_player():
    p1_check_p2_bet_transitions = [
        Transition(1, KuhnNode([], 'J'), KuhnAction.FOLD),
        Transition(1.0/3.0 + ALPHA, KuhnNode([], 'Q'), KuhnAction.CALL),
        Transition(1 - (1.0/3.0 + ALPHA), KuhnNode([], 'Q'), KuhnAction.FOLD),
        Transition(1, KuhnNode([], 'K'), KuhnAction.CALL),
    ]
    p1_bet_transitions = [
        Transition(1, KuhnNode([], 'J'), KuhnAction.FOLD),
        Transition(1.0/3.0, KuhnNode(p1_check_p2_bet_transitions, 'Q'), KuhnAction.CALL),
        Transition(2.0/3.0, KuhnNode([], 'Q'), KuhnAction.FOLD),
        Transition(1, KuhnNode(p1_check_p2_bet_transitions, 'K'), KuhnAction.CALL),
    ]
    p1_check_transitions = [
        Transition(1.0/3.0, KuhnNode([], 'J'), KuhnAction.CALL),
        Transition(2.0/3.0, KuhnNode([], 'J'), KuhnAction.CHECK),
        Transition(1, KuhnNode([], 'Q'), KuhnAction.CHECK),
        Transition(1, KuhnNode([], 'K'), KuhnAction.BET),
    ]
    KuhnNode([
        Transition(1.0/3.0, KuhnNode([
            Transition(
                ALPHA,
                KuhnNode(p1_bet_transitions),
                KuhnAction.BET
            ),
            Transition(
                1 - ALPHA,
                KuhnNode(p1_check_transitions),
                KuhnAction.CHECK
            )
        ], 'J'), None),
        Transition(1.0/3.0, KuhnAction([
            Transition(1, KuhnNode(p1_check_transitions), KuhnAction.CHECK)
        ],'Q'), None),
        Transition(1.0/3.0, KuhnAction([
            Transition(3 * ALPHA, KuhnNode(p1_bet_transitions), KuhnAction.BET)
        ],'K'), None)
    ])

class Kuhn(Environment):
    def __init__(self):
        self.actions_number = 4 # fold, check, bet
        self.max_actions_in_game = 3
        super().__init__()