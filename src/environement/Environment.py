import numpy as np
from .Agent import Agent
import math
from .State import State

class Environment():
    game_ended: bool
    _p1_turn: bool
    _p1_start: bool
    agent1: Agent
    agent2: Agent
    _state: State

    def __init__(self):
        self._p1_start = False
        self.create_state()
        self.create_agents()
        self.next_game(True)

    def create_state(self):
        raise NotImplementedError()

    def create_agents(self):
        raise NotImplementedError()

    def get_opponent(self, agent):
        if (agent == self.agent1):
            return self.agent2
        else:
            return self.agent1

    def get_available_actions(self):
        raise NotImplementedError()

    def is_p1_turn(self):
        return self._p1_turn

    def play(self, action):
        if self.game_ended:
            raise Exception('Game is ended, no action can be played')
        if self._p1_turn:
            self.agent1.play(action)
        else:
            self.agent2.play(action)
        self._state.action_history.append(action)
        self._p1_turn = not self._p1_turn

    def next_game(self, p1_start=True):
        self.game_ended = False
        self._p1_start = p1_start
        self._p1_turn = self._p1_start
        self._state.reset()
        self.agent1.reset(self._p1_start)
        self.agent2.reset(not self._p1_start)
        if not self._p1_start:
            self.agent1.__step += 1
