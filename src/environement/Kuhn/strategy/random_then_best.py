from src.environement.Agent import Agent
from src.environement.Environment import Environment
from src.environement.Kuhn.strategy.best_response import KuhnBestResponseStrategy
from src.environement.Kuhn.strategy.random import RandomStrategy
from ...Strategy import Strategy
from ..KuhnInfo import KuhnAction


NB_GAMES_BEFORE_SHIFT = 100

class RandomThenBestStrategy(Strategy):
    random: RandomStrategy
    best: KuhnBestResponseStrategy
    nb_games: int

    def __init__(self) -> None:
        self.random = RandomStrategy()
        self.best = KuhnBestResponseStrategy()
        self.nb_games = 0

    def get_name(self):
        return "random_then_best"

    def set_env(self, env: Environment):
        super().set_env(env)
        self.random.set_env(env)
        self.best.set_agent(env)

    def set_agent(self, agent: Agent):
        super().set_agent(agent)
        self.random.set_agent(agent)
        self.best.set_agent(agent)

    def get_play(self) -> KuhnAction:
        if (self.nb_games >= NB_GAMES_BEFORE_SHIFT):
            return self.best.get_play()
        else:
            return self.random.get_play()

    def reset(self):
        super().reset()
        self.nb_games = 0