from enum import Enum
import random
import numpy as np


class Cards(Enum):
    J = 0
    Q = 1
    K = 2


def random_card() -> Cards:
    return random.choice(list(Cards))


class KuhnAction(Enum):
    BET = 1
    CALL = 1
    CHECK = 0
    FOLD = 2


class KuhnNode():
    def __init__(self, transitions: list):
        self.transitions = transitions


class Transition():
    equilibrium: int
    node: KuhnNode
    action: int
    card: Cards

    def __init__(self, equilibrium, node, action, card):
        self.equilibrium = equilibrium
        self.action = action
        self.node = node
        self.card = card


ALPHA = 1.0 / 3.0


def build_kuhn_tree() -> KuhnNode:
    p1_check_p2_bet_transitions = [
        Transition(1, KuhnNode([]), KuhnAction.FOLD, Cards.J),
        Transition(0, KuhnNode([]), KuhnAction.CALL, Cards.J),
        Transition(1.0/3.0 + ALPHA, KuhnNode([]), KuhnAction.CALL, Cards.Q),
        Transition(1 - (1.0/3.0 + ALPHA), KuhnNode([]),
                   KuhnAction.FOLD, Cards.Q),
        Transition(1, KuhnNode([], ), KuhnAction.CALL, Cards.K),
        Transition(0, KuhnNode([]), KuhnAction.FOLD, Cards.K),
    ]
    p1_bet_transitions = [
        Transition(1, KuhnNode([]), KuhnAction.FOLD, Cards.J),
        Transition(0, KuhnNode([]), KuhnAction.CALL, Cards.J),
        Transition(1.0/3.0, KuhnNode([]), KuhnAction.CALL, Cards.Q),
        Transition(2.0/3.0, KuhnNode([]), KuhnAction.FOLD, Cards.Q),
        Transition(1, KuhnNode([]), KuhnAction.CALL, Cards.K),
        Transition(0, KuhnNode([]), KuhnAction.FOLD, Cards.K),
    ]
    p1_check_transitions = [
        Transition(1.0/3.0, KuhnNode(p1_check_p2_bet_transitions),
                   KuhnAction.BET, Cards.J),
        Transition(2.0/3.0, KuhnNode([]), KuhnAction.CHECK, Cards.J),
        Transition(1, KuhnNode([]), KuhnAction.CHECK, Cards.Q),
        Transition(0, KuhnNode(p1_check_p2_bet_transitions),
                   KuhnAction.BET, Cards.Q),
        Transition(1, KuhnNode(p1_check_p2_bet_transitions),
                   KuhnAction.BET, Cards.K),
        Transition(0, KuhnNode([]), KuhnAction.CHECK, Cards.K),
    ]
    return KuhnNode([
        Transition(
            ALPHA,
            KuhnNode(p1_bet_transitions),
            KuhnAction.BET,
            Cards.J
        ),
        Transition(
            1 - ALPHA,
            KuhnNode(p1_check_transitions),
            KuhnAction.CHECK,
            Cards.J
        ),
        Transition(1, KuhnNode(p1_check_transitions),
                   KuhnAction.CHECK, Cards.Q),
        Transition(0, KuhnNode(p1_bet_transitions), KuhnAction.BET, Cards.Q),
        Transition(3 * ALPHA, KuhnNode(p1_bet_transitions),
                   KuhnAction.BET, Cards.K),
        Transition(1 - (3 * ALPHA), KuhnNode(p1_check_transitions),
                   KuhnAction.CHECK, Cards.K)
    ])


KUHN_TREE = build_kuhn_tree()
