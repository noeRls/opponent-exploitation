from ..Environment import Environment
from .KuhnInfo import KuhnAction
from .KuhnAgent import KuhnAgent
from ..State import State

class KuhnEnv(Environment):
    def create_state(self):
        self._state = State(actions_number=len(list(KuhnAction)), max_actions_in_game=3)

    def create_agents(self):
        self.agent1 = KuhnAgent(self._state)
        self.agent2 = KuhnAgent(self._state)

    def _is_game_ended(self):
        return (
            (self.agent1.has_bet() and self.agent2.has_bet())
            or (self.agent1.has_bet() and self.agent2.has_fold())
            or (self.agent2.has_bet() and self.agent1.has_fold())
        )

    def _on_game_end(self):
        pass

    def get_available_actions(self):
        if (self.agent1.has_bet or self.agent2.has_bet):
            return [KuhnAction.FOLD, KuhnAction.CALL]
        else:
            return [KuhnAction.CHECK, KuhnAction.BET]