from src.environement.TexasHoldemLimit.TexasHoldemState import TexasHoldemState
from ..Agent import Agent
from .TexasHoldemDealer import FullDeckCard
from typing import List
import pokercfr
import numpy as np

def formatCards(cards: List[FullDeckCard]) -> str:
    return ''.join([str(c) for c in cards])

def runCfr(
    publicCards,
    privateCards,
    betNb,
    chips1,
    a1hasplayed,
    a2hasplayed,
    chips2,
    ourTurn,
    iteration
) -> np.ndarray:
    result: str = pokercfr.cfr(
        formatCards(publicCards),
        formatCards(privateCards),
        betNb,
        int(chips1),
        a1hasplayed,
        a2hasplayed,
        int(chips2),
        ourTurn,
        iteration
    )
    result = result[:-1]
    equilibrium = [float(x) for x in result.split(' ')]
    return np.array(equilibrium)

ITERATOIN_CFR = 1
class TexasHodlemAgent(Agent):
    cards: List[FullDeckCard]
    chips_bet: int
    bet_count_this_round: int
    has_fold: bool
    _state: TexasHoldemState

    def compute_private_equilibrium(self):
        return [0, 0, 0, 0, 0]

    def compute_public_equilibrium(self):
        chips_bet_opponent = self._state.chips_bet_a1 if self.chips_bet != self._state.chips_bet_a1 else self._state.chips_bet_a2
        return runCfr(
            self._state.public_cards,
            self.cards,
            self.bet_count_this_round,
            self.chips_bet,
            len(self._state.actions_this_round) > 1,
            len(self._state.actions_this_round) > 0,
            chips_bet_opponent,
            True,
            ITERATOIN_CFR
        )

    def on_next_round(self):
        self.bet_count_this_round = 0

    def reset(self, will_start):
        super().reset(will_start)
        self.chips_bet = 0
        self.bet_count_this_round = 0
        self.has_fold = False