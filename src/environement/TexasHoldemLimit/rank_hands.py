from enum import Enum
from .TexasHoldemDealer import FullDeckCard, CARD_NAME_LIST
from typing import List

# from https://www.programmersought.com/article/26933180642/
def rank_hand(cards: List[FullDeckCard]):
    sorted_card = sorted(cards, key=lambda x: x.rank)
    values = ''.join([c.name for c in sorted_card])
    suits = set([card.symbol for card in cards])
    is_flush = len(suits) == 1
    is_straight = values in CARD_NAME_LIST
    score = (2 * sum(values.count(card) for card in values) # Different card counting
                  + 13 * is_straight + 14 * is_flush, # straight, flush * 15
                  [card.rank for card in sorted_card[::-1]])
    return score

class HandCompareResult(Enum):
    LOSS=-1
    EQUAL=0,
    WIN=1

def compare_hands_5(hand1: List[FullDeckCard], hand2: List[FullDeckCard]):
    if (hand1 > hand2):
        return HandCompareResult.WIN
    elif (hand1 == hand2):
        return HandCompareResult.EQUAL
    else:
        return HandCompareResult.LOSS

def get_best_hand_7(hand: List[FullDeckCard]) -> List[FullDeckCard]:
    best_hand: List[FullDeckCard] = hand[:5]
    for i in range(len(hand) - 1):
        for i2 in range(i + 1, len(hand)):
            subhand = hand[:i] + hand[i:i2 - 1] + hand[i2 + 1:]
            if (compare_hands_5(subhand, best_hand) == HandCompareResult.WIN):
                best_hand = subhand
    return subhand