import numpy as np
from .State import State

class Agent():
    _state: State
    _step: int
    private_equilibrium: np.ndarray
    public_equilibrium: np.ndarray
    actions: np.ndarray
    revealed: bool
    _start: bool

    def __init__(self, env: State):
        self._state = env
        self.reset(True)

    def _compute_public_equilibrium(self):
        raise NotImplementedError()

    def _compute_private_equilibrium(self):
        raise NotImplementedError()

    def compute_equilibrium(self):
        self.private_equilibrium[self._step] = self._compute_private_equilibrium()
        self.public_equilibrium[self._step] = self._compute_public_equilibrium()

    def play(self, action):
        self.compute_equilibrium()
        self.actions[self._step] = action.value
        self._step += 1

    def reset(self, will_start):
        self._step = 0
        self._start = will_start
        self.private_equilibrium = np.zeros((self._state.get_max_action_agent(), self._state.actions_number))
        self.public_equilibrium = np.zeros((self._state.get_max_action_agent(), self._state.actions_number))
        self.actions = np.zeros((self._state.get_max_action_agent()))
        self.revealed = False
