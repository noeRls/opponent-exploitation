import math
import numpy as np
from src.environement.State import State
from src.environement.Environment import Environment
from tensorflow import keras

class NNGameInfo():
    available_action_size: int
    player_max_action_per_game: int
    game_outcome_size: int
    def __init__(self, state: State) -> None:
        self.available_action_size = state.actions_number
        self.player_max_action_per_game = state.get_max_action_agent()

class NN():
    model: keras.Sequential
    game_info: NNGameInfo
    modelling_size: int

    def __init__(self, game_info: NNGameInfo, modelling_size: int) -> None:
        self.game_info = game_info
        self.modelling_size = modelling_size
        self._create_model()

    def get_input_size(self):
        raise NotImplementedError()

    def _create_model(self):
        raise NotImplementedError()

    def get_weights(self):
        return self.model.weights

    def set_weights(self, weights: np.ndarray):
        self.model.set_weights(weights)

    def predict(self, input: np.ndarray):
        return self.model.predict(input)
