from __future__ import annotations
from src.environement.Strategy import Strategy
from src.environement.Environment import Environment
from .opponent_modelling import OpponentModellingNN, create_opponent_modelling_input
from .descision_making import DescisionMakingNN, create_descision_making_nn_input
from .NN import NNGameInfo
import numpy as np
from os import path


class NNStrategy(Strategy):
    oppnent_modelling_nn: OpponentModellingNN
    descision_making_nn: DescisionMakingNN
    opponent_model: np.ndarray
    modelling_size: int

    def __init__(self, env: Environment, modelling_size: int) -> None:
        super().__init__()
        game_info = NNGameInfo(env._state)
        self.modelling_size = modelling_size
        self.oppnent_modelling_nn = OpponentModellingNN(
            game_info=game_info, modelling_size=modelling_size)
        self.descision_making_nn = DescisionMakingNN(
            game_info=game_info, modelling_size=modelling_size)
        self.set_env(env)
        self.reset()

    def get_name(self):
        return f"NNStrategy-{id(self)}"

    def get_play(self):
        nn_input = create_descision_making_nn_input(
            self.env, self.agent, self.opponent_model)
        # print(f'input={nn_input}')
        result = self.descision_making_nn.predict(nn_input)
        # print(f'Descision making result: {result}')
        action = self.env.transform_action_to_enum(np.argmax(result))
        allowed_action = self.env.get_available_actions()
        if action in allowed_action:
            return action
        else:
            # print('invalid action...')
            return allowed_action[0]

    def on_game_end(self):
        super().on_game_end()
        result = self.oppnent_modelling_nn.predict(
            create_opponent_modelling_input(
                self.env, self.agent, self.opponent_model)
        )
        self.opponent_model = result

    def reset(self):
        super().reset()
        self.opponent_model = np.zeros(self.modelling_size)

    def get_weights_size(self):
        return self.oppnent_modelling_nn.get_total_weights_size(
        ) + self.descision_making_nn.get_total_weights_size()

    def set_weights_from_array(self, values: np.ndarray):
        split_size = self.oppnent_modelling_nn.get_total_weights_size()
        self.oppnent_modelling_nn.set_weights_from_array(values[:split_size])
        self.descision_making_nn.set_weights_from_array(values[split_size:])

    def copy(self) -> NNStrategy:
        strategy = NNStrategy(self.env, self.modelling_size)
        strategy.set_agent(self.agent)
        strategy.oppnent_modelling_nn.copy_model(self.oppnent_modelling_nn)
        strategy.descision_making_nn.copy_model(self.descision_making_nn)
        return strategy

    def load(self, save_dir: str, save_id: int):
        self.oppnent_modelling_nn.load(
            path.join(save_dir, f'modelling-nn-{save_id}'))
        self.descision_making_nn.load(
            path.join(save_dir, f'descision-nn-{save_id}'))

    def save(self, save_dir: str):
        self.oppnent_modelling_nn.save(
            path.join(save_dir, f'modelling-nn-{id(self)}'))
        self.descision_making_nn.save(
            path.join(save_dir, f'descision-nn-{id(self)}'))
