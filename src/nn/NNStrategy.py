from __future__ import annotations
from src.utils.paths import get_save_dir, get_save_file
from src.environement.Strategy import Strategy
from src.environement.Environment import Environment
from .opponent_modelling import OpponentModellingNN, create_opponent_modelling_input
from .descision_making import DescisionMakingNN, create_descision_making_nn_input
from .NN import NNGameInfo, NNParams
import numpy as np
from os import path

class NNStrategy(Strategy):
    oppnent_modelling_nn: OpponentModellingNN
    descision_making_nn: DescisionMakingNN
    opponent_model: np.ndarray
    params_om: NNParams
    params_dm: NNParams
    modelling_size: int

    def __init__(self, env: Environment, params_om: NNParams, params_dm: NNParams) -> None:
        super().__init__()
        game_info = NNGameInfo(env.state)
        self.set_env(env)

        self.oppnent_modelling_nn = OpponentModellingNN(
            game_info=game_info, params=params_om)
        self.descision_making_nn = DescisionMakingNN(
            game_info=game_info, params=params_dm)
        self._on_nn_update()

    def _on_nn_update(self):
        self.params_om = self.oppnent_modelling_nn.params
        self.params_dm = self.descision_making_nn.params
        if (self.params_dm.modelling_size != self.params_om.modelling_size):
            raise Exception('modelling_size is not equal')
        self.modelling_size = self.params_om.modelling_size
        self.reset()

    def get_name(self):
        return f"NNStrategy-{id(self)}"

    def get_play(self):
        nn_input = create_descision_making_nn_input(
            self.env, self.agent, self.opponent_model)
        result = self.descision_making_nn.predict(nn_input)
        action = self.env.transform_action_to_enum(np.argmax(result))
        return self._action_or_default(action)

    def on_game_end(self):
        super().on_game_end()
        result = self.oppnent_modelling_nn.predict(
            create_opponent_modelling_input(
                self.env, self.agent, self.opponent_model)
        )
        self.opponent_model = result

    def reset(self):
        super().reset()
        self.opponent_model = np.zeros(self.modelling_size)

    def get_weights_size(self):
        return self.oppnent_modelling_nn.get_total_weights_size(
        ) + self.descision_making_nn.get_total_weights_size()

    def set_weights_from_array(self, values: np.ndarray):
        split_size = self.oppnent_modelling_nn.get_total_weights_size()
        self.oppnent_modelling_nn.set_weights_from_array(values[:split_size])
        self.descision_making_nn.set_weights_from_array(values[split_size:])

    def copy(self) -> NNStrategy:
        strategy = NNStrategy(
            self.env,
            params_dm=self.params_dm,
            params_om=self.params_om
        )
        strategy.set_agent(self.agent)
        strategy.oppnent_modelling_nn.copy_model(self.oppnent_modelling_nn)
        strategy.descision_making_nn.copy_model(self.descision_making_nn)
        return strategy

    def load(self, save_id: str):
        self.oppnent_modelling_nn.load(
            path.join(get_save_dir(save_id), "models", 'modelling-nn'))
        self.descision_making_nn.load(
            path.join(get_save_dir(save_id), "models", 'descision-nn'))
        self._on_nn_update()

    def save(self, save_id: str):
        self.oppnent_modelling_nn.save(
            path.join(get_save_dir(save_id), "models", 'modelling-nn'))
        self.descision_making_nn.save(
            path.join(get_save_dir(save_id), "models", 'descision-nn'))
