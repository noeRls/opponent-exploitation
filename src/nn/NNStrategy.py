from src.environement.Strategy import Strategy
from src.environement.Environment import Environment
from src.environement.Agent import Agent
from .opponent_modelling import OpponentModellingNN, create_opponent_modelling_input
from .descision_making import DescisionMakingNN, create_descision_making_nn_input
from .NN import NNGameInfo
import numpy as np

class NNStrategy(Strategy):
    oppnent_modelling_nn: OpponentModellingNN
    descision_making_nn: DescisionMakingNN
    opponent_model: np.ndarray
    modelling_size: int

    def __init__(self, env: Environment, agent: Agent, modelling_size: int) -> None:
        super().__init__(env, agent=agent)
        game_info = NNGameInfo(env._state)
        self.modelling_size = modelling_size
        self.oppnent_modelling_nn = OpponentModellingNN(game_info=game_info, modelling_size=modelling_size)
        self.descision_making_nn = DescisionMakingNN(game_info=game_info, modelling_size=modelling_size)
        self.reset()

    def get_name(self):
        return "NNStrategy"

    def get_play(self):
        result = self.descision_making_nn.predict(
            create_descision_making_nn_input(self.env, self.agent, self.opponent_model)
        )
        print(f'Descision making result: {result}')
        return np.argmax(result)

    def on_game_end(self):
        super().on_game_end()
        result = self.oppnent_modelling_nn.predict(
            create_opponent_modelling_input(self.env, self.agent, self.opponent_model)
        )
        print(f'Opponent model result: {result}')
        self.opponent_model = result

    def reset(self):
        super().reset()
        self.oppnent_modelling_nn = np.zeros(self.modelling_size)
